<?php

/**
 * Geocoder code and document available at:
 * https://github.com/geocoder-php/Geocoder
 * http://geocoder-php.org/Geocoder/
 */

use Ivory\HttpAdapter\CurlHttpAdapter;
use Geocoder\Geocoder;
use Geocoder\Model\Address;

class ResultController extends Zend_Controller_Action
{
    private $_curl;
    private $_geocoder;
    protected $_geoPHP;

    public function init()
    {
        /* Initialize action controller here */
        $this->_curl = new CurlHttpAdapter();
        $this->_geocoder = new \Geocoder\Provider\GoogleMaps($this->_curl);
    }

    public function indexAction()
    {
        $params = $this->getRequest()->getParams();
        $search = $params['search'];
        $this->view->assign('search', $search);

        /**
         * Geocoder\Model\Address $addresses
         */
        $addresses = $this->_geocoder->geocode($search);

        foreach ($addresses as $address) {
            $this->view->assign('lat', $address->getLatitude());
            $this->view->assign('lng', $address->getLongitude());
        }

        $this->view->fundaAanbod = new Application_Model_Funda_Aanbod();

        $this->_testPoly();
    }

    /**
     * @param $code
     * @return mixed
     */
    protected function _filterJson($code)
    {
        $code = str_replace(' ','_',$code);
        $code = str_replace(',',' ',$code);
        return str_replace('_',',',$code);
    }

    protected function _testPoly()
    {
        $points1 = '51.977222442627,4.5360550880432 51.977165222168,4.5361661911011 51.976287841797,4.5470948219299 51.975746154785,4.5475668907166 51.973056793213,4.5486612319946 51.966480255127,4.5581240653992 51.96842956543,4.5663261413574 51.973014831543,4.5711722373962 51.974174499512,4.572714805603 51.985961914062,4.5790767669678 51.981861114502,4.5954389572144 51.968845367432,4.5980777740479 51.960529327393,4.5848388671875 51.953170776367,4.5823178291321 51.949569702148,4.5807399749756 51.944107055664,4.5779938697815 51.944171905518,4.577220916748 51.944000244141,4.569109916687 51.933166503906,4.5606989860535 51.932067871094,4.5571799278259 51.909366607666,4.5565900802612 51.907146453857,4.5618681907654 51.905296325684,4.5687417984009 51.904747009277,4.5742168426514 51.904712677002,4.5747542381287 51.90299987793,4.5796661376953 51.896530151367,4.5761480331421 51.893650054932,4.5739808082581 51.875217437744,4.574089050293 51.870666503906,4.5708332061768 51.870819091797,4.568510055542 51.870998382568,4.5679988861084 51.876594543457,4.5584669113159 51.875854492188,4.5529308319092 51.866512298584,4.5391550064087 51.859981536865,4.5376110076904 51.839275360107,4.5358080863953 51.855674743652,4.5224180221558 51.849193572998,4.5121831893921 51.838005065918,4.5088567733765 51.846809387207,4.4968299865723 51.849880218506,4.4920339584351 51.852439880371,4.4811182022095 51.854682922363,4.4775671958923 51.856666564941,4.4712629318237 51.857536315918,4.4690961837769 51.858001708984,4.4613327980042 51.847850799561,4.451159954071 51.841186523438,4.4437980651855 51.841609954834,4.4302358627319 51.841823577881,4.4299788475037 51.844104766846,4.4264597892761 51.86124420166,4.4186491966248 51.866714477539,4.4072551727295 51.872032165527,4.3983931541443 51.877975463867,4.3950462341309 51.881790161133,4.3952169418335 51.889923095703,4.4012689590454 51.893653869629,4.403929233551 51.897045135498,4.4076628684998 51.912837982178,4.4160499572754 51.928169250488,4.40394115448 51.929447174072,4.3952169418335 51.936710357666,4.4117832183838 51.947742462158,4.4109349250793 51.952606201172,4.406466960907 51.952892303467,4.4062948226929 51.953128814697,4.4066171646118 51.969863891602,4.409294128418 51.979885101318,4.4090361595154 51.986572265625,4.4228549003601 51.994659423828,4.4439687728882 51.972270965576,4.4404501914978 51.975490570068,4.4608778953552 51.982765197754,4.4654269218445 51.99914932251,4.470232963562 51.994037628174,4.4770350456238 51.993549346924,4.4776577949524 51.991455078125,4.4907188415527 51.990840911865,4.4939579963684 51.98851776123,4.4974727630615 51.986122131348,4.4993109703064 51.982315063477,4.5126981735229 51.97940826416,4.5205731391907 51.977333068848,4.5256671905518 51.977573394775,4.5346159934998 51.977241516113,4.536012172699 51.977222442627,4.5360550880432';
        $points2 = '51.855079650879,4.4923782348633 51.86323928833,4.482250213623 51.863746643066,4.4819488525391 51.879776000977,4.4882578849792 51.890319824219,4.4892082214355 51.874794006348,4.5057668685913 51.86462020874,4.5167541503906 51.862442016602,4.5218100547791 51.857559204102,4.5297908782959 51.859130859375,4.5396609306335 51.858684539795,4.5469660758972 51.85799407959,4.5534892082214 51.859718322754,4.55863904953 51.857006072998,4.5733880996704 51.856826782227,4.5736050605774 51.845287322998,4.5689492225647 51.844898223877,4.547308921814 51.840843200684,4.540657043457 51.841278076172,4.5352501869202 51.83723449707,4.5233631134033 51.835327148438,4.5157608985901 51.842517852783,4.5088138580322 51.837421417236,4.4901461601257 51.837368011475,4.4894590377808 51.845520019531,4.4919490814209 51.855079650879,4.4923782348633';
        $points1 = $this->_filterJson($points1);
        $points2 = $this->_filterJson($points2);
        $this->view->polygonSvgOne = new Application_Model_Polygon($points1);
//        $this->view->polygonSvgTwo = new Application_Model_Polygon($points2);
        $searchOne = sprintf("POLYGON((%s))','wkt'",$points1);
        $searchTwo = sprintf("POLYGON((%s))','wkt'",$points2);
        echo $points1;
        echo '<hr>';
        echo $points2;
        $poly1 = geoPHP::load($searchOne);
        $poly2 = geoPHP::load($searchTwo);
        $combined_poly = $poly1->intersects($poly2);
//        $kml = $combined_poly->out('kml');

        echo '<hr>';
        echo $combined_poly;
//        die();

        // Polygon WKT example
        $polygon = geoPHP::load('POLYGON((1 1,5 1,5 5,1 5,1 1),(2 2,2 3,3 3,2 2))');
        $area = $polygon->getArea();
        $centroid = $polygon->getCentroid();
        $centX = $centroid->getX();
        $centY = $centroid->getY();

        print "This polygon has an area of ".$area." and a centroid with X=".$centX." and Y=".$centY;

        // MultiPoint json example
        print "<br/>";
        $json =
            '{
               "type": "MultiPoint",
               "coordinates": [
                   [100.0, 0.0], [101.0, 1.0], [102.0, 2.0]
               ]
            }';

        $multipoint = geoPHP::load($json);
        $multipoint_points = $multipoint->getComponents();
        $first_wkt = $multipoint_points[0]->out('wkt');

        print "This multipolygon has ".$multipoint->numGeometries()." points. The first point has a wkt representation of ".$first_wkt;

    }

    public function getGeoPHP()
    {
        if(is_null($this->_geoPHP))
        {
            $this->_geoPHP = new geoPHP();
        } else {
            return $this->_geoPHP;
        }
    }
}

